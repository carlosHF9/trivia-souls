{"version":3,"sources":["startScreen.js","questions.js","score.js","index.js"],"names":["StartScreen","props","state","className","onClick","this","startGame","React","Component","Questions","sendScore","e","preventDefault","console","log","target","textContent","isItRight","question","correctAnswer","getScore","getToNextQuestion","score","player","Question","firstAlternative","secondAlternative","Score","Menu","setState","start","getNextQuestion","numberOfQuestions","questions","ask","name","ReactDom","render","document","getElementById"],"mappings":"w1CAyBeA,G,wDAnBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,GAFC,E,qDAOd,OACI,qBAAKC,UAAU,aAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,kGACA,wBAAQC,QAASC,KAAKJ,MAAMK,UAAWH,UAAU,eAAjD,qC,GAZMI,IAAMC,YCsDjBC,G,wDA5CX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IAGVS,UAAY,SAACC,GACTA,EAAEC,iBACFC,QAAQC,IAAIH,EAAEI,OAAOC,cANP,EASlBC,UAAY,SAACN,GACNA,EAAEI,OAAOC,cAAgB,EAAKf,MAAMiB,SAASC,eAC5C,EAAKlB,MAAMmB,WACX,EAAKnB,MAAMoB,qBAEX,EAAKpB,MAAMoB,qBAdD,E,qDAqBd,OACI,qBAAKlB,UAAU,cAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,sBAAKA,UAAU,MAAf,UACI,wCAAWE,KAAKJ,MAAMqB,SACtB,wCAAWjB,KAAKJ,MAAMsB,UACtB,qBAAKpB,UAAU,uBAAf,SACI,mBAAGA,UAAU,WAAb,SAAyBE,KAAKJ,MAAMiB,SAASM,gBAGrD,sBAAKrB,UAAU,cAAf,UACI,wBAAQA,UAAU,UAAUC,QAASC,KAAKY,UAA1C,SAAsDZ,KAAKJ,MAAMiB,SAASO,mBAC1E,wBAAQtB,UAAU,UAAUC,QAASC,KAAKY,UAA1C,SAAsDZ,KAAKJ,MAAMiB,SAASQ,gC,GAlC1EnB,IAAMC,Y,OCkBfmB,G,wDAxBX,WAAY1B,GAAO,uCACTA,G,qDAGN,OACI,qBAAKE,UAAU,eAAf,SACI,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,oBAAIA,UAAU,cAAd,mBACA,sBAAKA,UAAU,cAAf,UACI,6BAAKE,KAAKJ,MAAMqB,QAChB,mBAAGnB,UAAU,gBAAb,sC,GAZRI,IAAMC,YCCpBoB,E,kDACF,WAAY3B,GAAO,IAAD,8BACd,cAAMA,IAUVK,UAAY,WACR,EAAKuB,SAAS,CAACC,OAAO,KAZR,EAclBV,SAAW,WACP,EAAKS,SAAS,CAACP,MAAO,EAAKpB,MAAMoB,MAAO,KAf1B,EAkBlBS,gBAAkB,WACd,EAAKF,SAAS,CAACG,kBAAmB,EAAK9B,MAAM8B,kBAAoB,KAjBjE,EAAK9B,MAAQ,CACToB,MAAO,EACPC,OAAQ,SACRO,OAAO,EACPG,UAAWC,EAAIzB,UACfuB,kBAAmB,GAPT,E,qDAuBd,OAAI3B,KAAKH,MAAM4B,MAILzB,KAAKH,MAAM4B,OAASzB,KAAKH,MAAM+B,UAAU5B,KAAKH,MAAM8B,mBAEtD,cAAC,EAAD,CACCd,SAAUb,KAAKH,MAAM+B,UAAU5B,KAAKH,MAAM8B,mBAC1CZ,SAAUf,KAAKe,SACfC,kBAAmBhB,KAAK0B,gBACxBT,MAAOjB,KAAKH,MAAMoB,MAClBa,KAAM9B,KAAKH,MAAMqB,SAGflB,KAAKH,MAAM+B,UAAU5B,KAAKH,MAAM8B,wBAApC,EAEC,cAAC,EAAD,CAAOV,MAAOjB,KAAKH,MAAMoB,QAdzB,cAAC,EAAD,CAAahB,UAAWD,KAAKC,gB,GA1B1BC,IAAMC,WA+CzB4B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ed1a72ec.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport './start.css'\n\n\nclass StartScreen extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {}\n\n    }\n\n    render(){\n        return(\n            <div className=\"start-menu\">\n                <div className=\"inner-start-menu\">\n                    <h2>Welcome to Dark souls trivia game! Are you ready for a new play?</h2>\n                    <button onClick={this.props.startGame} className=\"start-button\">Start The game</button>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default StartScreen","import React from 'react';\n\nimport './questions.css';\n\n//Props - 'Score' returns the current score state, whereas getScore updates the score as answers given \n//are correct\n\n//getScore={this.getScore}\n//getToNextQuestion={this.getNextQuestion}\n//score={this.state.score} \n//name={this.state.player}\n\n\n\nclass Questions extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    sendScore = (e) => {\n        e.preventDefault()\n        console.log(e.target.textContent)\n    }\n\n    isItRight = (e) =>{\n        if(e.target.textContent === this.props.question.correctAnswer){\n            this.props.getScore()\n            this.props.getToNextQuestion()\n        } else {\n            this.props.getToNextQuestion()\n        }\n        \n    }\n\n\n    render(){\n        return(\n            <div className=\"main-window\">\n                <div className=\"trivia-questions\">\n                    <div className=\"top\">\n                        <h3>Score:{this.props.score}</h3>\n                        <h3>Name: {this.props.player}</h3>\n                        <div className=\"question-box rounded\">\n                            <p className=\"question\">{this.props.question.Question}</p>\n                        </div>\n                    </div>\n                    <div className=\"bot-answers\">\n                        <button className=\"rounded\" onClick={this.isItRight}>{this.props.question.firstAlternative}</button>\n                        <button className=\"rounded\" onClick={this.isItRight}>{this.props.question.secondAlternative}</button>\n                        \n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Questions","import React from 'react';\nimport './score.css';\n\n\n\n\n\nclass Score extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <div className=\"score-window\">\n                <div className=\"score-table\">\n                    <div className=\"score-table-info\">\n                        <h2 className=\"player-name\">Score</h2>\n                        <div className=\"inner-score\">\n                            <h3>{this.props.score}</h3>\n                            <p className=\"increase-font\">Game over!</p>\n                        </div>\n                        \n                    </div>\n                    \n\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Score","import React from 'react';\nimport ReactDom from 'react-dom';\nimport StartScreen from './startScreen';\nimport Questions from './questions'\nimport ask from './ask';\nimport Score from './score';\n\n\nclass Menu extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            score: 0,\n            player: 'Carlos',\n            start: false,\n            questions: ask.Questions,\n            numberOfQuestions: 0\n        }\n    }\n\n    startGame = () =>{\n        this.setState({start: true})\n    }\n    getScore = () => {\n        this.setState({score: this.state.score +5})\n    }\n\n    getNextQuestion = () =>{\n        this.setState({numberOfQuestions: this.state.numberOfQuestions + 1})\n    }\n\n    render() {\n        if(!this.state.start){\n            return(\n                <StartScreen startGame={this.startGame}/>\n            )\n        } else if(this.state.start && this.state.questions[this.state.numberOfQuestions]){\n            return(\n                <Questions\n                 question={this.state.questions[this.state.numberOfQuestions]}   \n                 getScore={this.getScore}\n                 getToNextQuestion={this.getNextQuestion}\n                 score={this.state.score} \n                 name={this.state.player}\n                 />\n            )\n        } else if(!this.state.questions[this.state.numberOfQuestions]){\n            return (\n                <Score score={this.state.score} />\n            )\n        }\n    }\n}\n\n\nReactDom.render(\n    <Menu />,\n    document.getElementById('root')\n)"],"sourceRoot":""}